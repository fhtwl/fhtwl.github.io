(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{632:function(s,e,o){"use strict";o.r(e);var t=o(13),n=Object(t.a)({},(function(){var s=this,e=s.$createElement,o=s._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[o("h2",{attrs:{id:"session-与-token-的区别"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#session-与-token-的区别"}},[s._v("#")]),s._v(" session 与 token 的区别")]),s._v(" "),o("h4",{attrs:{id:"session-与-token-的实现原理"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#session-与-token-的实现原理"}},[s._v("#")]),s._v(" session 与 token 的实现原理")]),s._v(" "),o("ol",[o("li",[o("p",[s._v("session 的实现原理：在用户登录后，将用户信息存在服务端，并将对应的 sessionId 设置在 cookie 上，传递给客户端，客户端请求时就会在 cookie 上携带这个 sessionId，服务端再去校验 sessionId。http 本身是无状态的，通过 sessionId，整个请求过程就有了状态")])]),s._v(" "),o("li",[o("p",[s._v("token 的实现原理：在用户登录后，根据用户信息生成 token 并将 token 返回客户端。客户端将 token 保存下来，每次请求都会携带 token，服务端再去解析 token，获取用户信息和过期时间。")])])]),s._v(" "),o("h4",{attrs:{id:"session-与-token-的相同点"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#session-与-token-的相同点"}},[s._v("#")]),s._v(" session 与 token 的相同点")]),s._v(" "),o("ol",[o("li",[s._v("两者都用于验证用户登录状态")])]),s._v(" "),o("h4",{attrs:{id:"session-与-token-的不同点"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#session-与-token-的不同点"}},[s._v("#")]),s._v(" session 与 token 的不同点")]),s._v(" "),o("ol",[o("li",[o("p",[s._v("session 保存在服务端，token 保存在客户端")])]),s._v(" "),o("li",[o("p",[s._v("session 保存在 cookie 中，在客户端和服务端之间传递，容易被伪造。token 一般保存在 localStorage，且是加密的，安全性更高")])]),s._v(" "),o("li",[o("p",[s._v("session 保存在服务端，如果有多个服务器，就需要在多个服务器间同时保存和更新 session 状态，业务复杂，性能压力大")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);